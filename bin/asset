#!/usr/bin/env node

/**
 * Module dependencies.
 */

var asset = require('../')
  , fs = require('fs');

/**
 * Arguments.
 */

var args = process.argv.slice(2);

/**
 * Assets to install.
 */

var assets = [];

/**
 * Usage information.
 */

var usage = [
    ''
  , '  Usage: asset [options] <name ...>'
  , ''
  , '  Options:'
  , ''
  , '    -o, --out <dir>   output directory defaulting to ./public'
  , '    -h, --help        display help information'
  , ''
].join('\n');

/**
 * Configuration.
 */

var config = readConfig(process.cwd() + '/.asset')
  || readConfig(process.env.HOME + '/.asset')
  || {};

// parse arguments

var arg;
while (args.length) {
  arg = args.shift();
  switch (arg) {
    case '-h':
    case '--help':
    case 'help':
      console.log(usage);
      process.exit();
      break;
    default:
      assets.push(arg);
  }
}

// assets given

if (assets.length) {
  assets = assets.map(normalize);
  var installer = asset.install(assets);

  installer.on('error', function(err){
    throw err;
  });

  installer.on('end', function(){
    log('installation', 'complete');
  });
} else {
  abort('asset <name ...> required');
}

/**
 * Log key / val.
 *
 * @param {String} key
 * @param {String} val
 */

function log(key, val) {
  console.log('  \033[90m%s :\033[0m \033[36m%s\033[0m', key, val);
}

/**
 * Normalize `asset` string, returning an object
 * representation of what is to be installed.
 *
 * @param {String} asset
 * @return {Object}
 */

function normalize(asset) {
  var parts = asset.split('@')
    , name = parts.shift()
    , version = parts.shift();

  return {
      name: name
    , version: version
  };
}

/**
 * Abort with `msg`.
 *
 * @param {String} msg
 */

function abort(msg) {
  console.error('  \033[31m%s\033[0m', msg);
  process.exit(1);
}

/**
 * Attempt to read config json at `path`.
 *
 * @param {String} path
 * @return {Object}
 */

function readConfig(path) {
  try {
    return JSON.parse(fs.readFileSync(path, 'utf8'));
  } catch (err) {
    // ignore
  }
}